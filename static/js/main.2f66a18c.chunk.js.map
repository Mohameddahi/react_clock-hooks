{"version":3,"sources":["components/clock/Colck.tsx","App.tsx","index.tsx"],"names":["Clock","props","useState","Date","time","setTime","prevProps","useRef","useEffect","timerId","window","setInterval","clockName","current","console","debug","clearInterval","className","toUTCString","slice","App","setColckName","isClockVisible","setIsClockVisible","document","addEventListener","event","preventDefault","value","now","toString","getRandomName","removeEventListener","ReactDOM","render","getElementById"],"mappings":"oLAMaA,EAAyB,SAACC,GACrC,MAAwBC,mBAAS,IAAIC,MAArC,mBAAOC,EAAP,KAAaC,EAAb,KACMC,EAAYC,iBAAON,GAiBzB,OAfAO,qBAAU,WACR,IAAMC,EAAUC,OAAOC,aAAY,WACjCN,EAAQ,IAAIF,QACX,KACKS,EAAcX,EAAdW,UAQR,OANIA,IAAcN,EAAUO,QAAQD,YAElCE,QAAQC,MAAR,uBAA8BT,EAAUO,QAAQD,UAAhD,eAAgEA,IAChEN,EAAUO,QAAUZ,GAGf,kBAAMS,OAAOM,cAAcP,MACjC,CAACR,EAAMW,YAGR,sBAAKK,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGhB,EAAMW,YAGR,YAED,sBAAMK,UAAU,cAAhB,SACGb,EAAKc,cAAcC,OAAO,IAAK,SCxBjC,IAAMC,EAAgB,WAC3B,MAAkClB,mBAAS,WAA3C,mBAAOU,EAAP,KAAkBS,EAAlB,KACA,EAA4CnB,oBAAS,GAArD,mBAAOoB,EAAP,KAAuBC,EAAvB,KA6BA,OA3BAf,qBAAU,WACRgB,SAASC,iBAAiB,eAAe,SAACC,GACxCA,EAAMC,iBACNJ,GAAkB,MAGpBC,SAASC,iBAAiB,SAAS,WACjCF,GAAkB,MAGpB,IAAMd,EAAUC,OAAOC,aAAY,WACjCU,EArBN,WACE,IAAMO,EAAQzB,KAAK0B,MAAMC,WAAWX,OAAO,GAE3C,MAAM,SAAN,OAAgBS,GAkBCG,MACZ,MAEH,OAAO,WACLrB,OAAOM,cAAcP,GACrBe,SAASQ,oBAAoB,eAAe,SAACN,GAC3CA,EAAMC,iBACNJ,GAAkB,MAGpBC,SAASQ,oBAAoB,SAAS,WACpCT,GAAkB,SAGrB,IAGD,sBAAKN,UAAU,MAAf,UACE,6CACCK,GACC,cAAC,EAAD,CAAOV,UAAWA,QC1C1BqB,IAASC,OACP,cAAC,EAAD,IACAV,SAASW,eAAe,U","file":"static/js/main.2f66a18c.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\ntype Props = {\n  clockName: string;\n};\n\nexport const Clock: React.FC<Props> = (props) => {\n  const [time, setTime] = useState(new Date());\n  const prevProps = useRef(props);\n\n  useEffect(() => {\n    const timerId = window.setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n    const { clockName } = props;\n\n    if (clockName !== prevProps.current.clockName) {\n      // eslint-disable-next-line no-console\n      console.debug(`Renamed from ${prevProps.current.clockName} to ${clockName}`);\n      prevProps.current = props;\n    }\n\n    return () => window.clearInterval(timerId);\n  }, [props.clockName]);\n\n  return (\n    <div className=\"Clock\">\n      <strong className=\"Clock__name\">\n        {props.clockName}\n      </strong>\n\n      {' time is '}\n\n      <span className=\"Clock__time\">\n        {time.toUTCString().slice(-12, -4)}\n      </span>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { Clock } from './components/clock/Colck';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\nexport const App: React.FC = () => {\n  const [clockName, setColckName] = useState('Clock-0');\n  const [isClockVisible, setIsClockVisible] = useState(true);\n\n  useEffect(() => {\n    document.addEventListener('contextmenu', (event: MouseEvent) => {\n      event.preventDefault();\n      setIsClockVisible(false);\n    });\n\n    document.addEventListener('click', () => {\n      setIsClockVisible(true);\n    });\n\n    const timerId = window.setInterval(() => {\n      setColckName(getRandomName());\n    }, 3300);\n\n    return () => {\n      window.clearInterval(timerId);\n      document.removeEventListener('contextmenu', (event: MouseEvent) => {\n        event.preventDefault();\n        setIsClockVisible(false);\n      });\n\n      document.removeEventListener('click', () => {\n        setIsClockVisible(true);\n      });\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>React clock</h1>\n      {isClockVisible && (\n        <Clock clockName={clockName} />\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}