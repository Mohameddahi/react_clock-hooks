{"version":3,"sources":["components/clock/Colck.tsx","App.tsx","index.tsx"],"names":["Clock","props","useState","Date","time","setTime","useEffect","timerId","window","setInterval","today","console","info","toUTCString","slice","clearInterval","prevProps","useRef","clockName","current","debug","className","App","setColckName","isClockVisible","setIsClockVisible","document","addEventListener","event","preventDefault","value","now","toString","getRandomName","removeEventListener","ReactDOM","render","getElementById"],"mappings":"oLAMaA,EAAyB,SAACC,GACrC,MAAwBC,mBAAS,IAAIC,MAArC,mBAAOC,EAAP,KAAaC,EAAb,KAEAC,qBAAU,WACR,IAAMC,EAAUC,OAAOC,aAAY,WACjC,IAAMC,EAAQ,IAAIP,KAElBE,EAAQK,GAERC,QAAQC,KAAKF,EAAMG,cAAcC,OAAO,IAAK,MAC5C,KAEH,OAAO,kBAAMN,OAAOO,cAAcR,MACjC,IAEH,IAAMS,EAAYC,iBAAOhB,GAYzB,OAVAK,qBAAU,WACR,IAAQY,EAAcjB,EAAdiB,UAEJA,IAAcF,EAAUG,QAAQD,YAElCP,QAAQS,MAAR,qBAA4BF,IAC5BF,EAAUG,QAAUlB,KAErB,CAACA,EAAMiB,YAGR,sBAAKG,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGpB,EAAMiB,YAGR,YAED,sBAAMG,UAAU,cAAhB,SACGjB,EAAKS,cAAcC,OAAO,IAAK,SChCjC,IAAMQ,EAAgB,WAC3B,MAAkCpB,mBAAS,WAA3C,mBAAOgB,EAAP,KAAkBK,EAAlB,KACA,EAA4CrB,oBAAS,GAArD,mBAAOsB,EAAP,KAAuBC,EAAvB,KA6BA,OA3BAnB,qBAAU,WACRoB,SAASC,iBAAiB,eAAe,SAACC,GACxCA,EAAMC,iBACNJ,GAAkB,MAGpBC,SAASC,iBAAiB,SAAS,WACjCF,GAAkB,MAGpB,IAAMlB,EAAUC,OAAOC,aAAY,WACjCc,EArBN,WACE,IAAMO,EAAQ3B,KAAK4B,MAAMC,WAAWlB,OAAO,GAE3C,MAAM,SAAN,OAAgBgB,GAkBCG,MACZ,MAEH,OAAO,WACLzB,OAAOO,cAAcR,GACrBmB,SAASQ,oBAAoB,eAAe,SAACN,GAC3CA,EAAMC,iBACNJ,GAAkB,MAGpBC,SAASQ,oBAAoB,SAAS,WACpCT,GAAkB,SAGrB,IAGD,sBAAKJ,UAAU,MAAf,UACE,6CACCG,GACC,cAAC,EAAD,CAAON,UAAWA,QC1C1BiB,IAASC,OACP,cAAC,EAAD,IACAV,SAASW,eAAe,U","file":"static/js/main.7bd19f0e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\ntype Props = {\n  clockName: string;\n};\n\nexport const Clock: React.FC<Props> = (props) => {\n  const [time, setTime] = useState(new Date());\n\n  useEffect(() => {\n    const timerId = window.setInterval(() => {\n      const today = new Date();\n\n      setTime(today);\n      // eslint-disable-next-line no-console\n      console.info(today.toUTCString().slice(-12, -4));\n    }, 1000);\n\n    return () => window.clearInterval(timerId);\n  }, []);\n\n  const prevProps = useRef(props);\n\n  useEffect(() => {\n    const { clockName } = props;\n\n    if (clockName !== prevProps.current.clockName) {\n      // eslint-disable-next-line no-console\n      console.debug(`Renamed to ${clockName}`);\n      prevProps.current = props;\n    }\n  }, [props.clockName]);\n\n  return (\n    <div className=\"Clock\">\n      <strong className=\"Clock__name\">\n        {props.clockName}\n      </strong>\n\n      {' time is '}\n\n      <span className=\"Clock__time\">\n        {time.toUTCString().slice(-12, -4)}\n      </span>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { Clock } from './components/clock/Colck';\n\nfunction getRandomName(): string {\n  const value = Date.now().toString().slice(-4);\n\n  return `Clock-${value}`;\n}\n\nexport const App: React.FC = () => {\n  const [clockName, setColckName] = useState('Clock-0');\n  const [isClockVisible, setIsClockVisible] = useState(true);\n\n  useEffect(() => {\n    document.addEventListener('contextmenu', (event: MouseEvent) => {\n      event.preventDefault();\n      setIsClockVisible(false);\n    });\n\n    document.addEventListener('click', () => {\n      setIsClockVisible(true);\n    });\n\n    const timerId = window.setInterval(() => {\n      setColckName(getRandomName());\n    }, 3300);\n\n    return () => {\n      window.clearInterval(timerId);\n      document.removeEventListener('contextmenu', (event: MouseEvent) => {\n        event.preventDefault();\n        setIsClockVisible(false);\n      });\n\n      document.removeEventListener('click', () => {\n        setIsClockVisible(true);\n      });\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>React clock</h1>\n      {isClockVisible && (\n        <Clock clockName={clockName} />\n      )}\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}